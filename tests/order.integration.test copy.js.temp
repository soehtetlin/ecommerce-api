const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../index'); 
const User = require('../models/User');
const Product = require('../models/Product');
const Variant = require('../models/Variant');
const Order = require('../models/Order');
const Cart = require('../models/Cart');

// Set the environment to 'test'
process.env.NODE_ENV = 'test';

describe('Order API Endpoints', () => {
    let adminToken, customerToken, testVariantId;

    // Before all tests, set up the database and create users/products
    beforeAll(async () => {
        // Create an Admin User
        await request(app).post('/api/auth/register').send({
            name: 'Order Test Admin',
            email: 'order.admin.test@example.com',
            password: 'password123',
            adminSecretKey: process.env.ADMIN_SECRET_KEY || 'your_admin_secret_for_assessment'
        });
        const adminLoginRes = await request(app).post('/api/auth/login').send({
            email: 'order.admin.test@example.com',
            password: 'password123'
        });
        adminToken = adminLoginRes.body.token;

        // Create a Customer User
        const customerRegisterRes = await request(app).post('/api/auth/register').send({
            name: 'Order Test Customer',
            email: 'order.customer.test@example.com',
            password: 'password123'
        });
        customerToken = customerRegisterRes.body.token;

        // Create a Product and a Variant for testing
        const productRes = await request(app)
            .post('/api/products')
            .set('Authorization', `Bearer ${adminToken}`)
            .send({
                name: "Product for Order Test",
                description: "A product to test ordering",
                category: "Testing"
            });
        
        const variantRes = await request(app)
            .post(`/api/products/${productRes.body._id}/variants`)
            .set('Authorization', `Bearer ${adminToken}`)
            .send({
                sku: "ORDER-TEST-SKU",
                price: 50,
                stock: 10,
                color: "Blue"
            });
        testVariantId = variantRes.body._id;
    });

    // After all tests, clean up the database
    afterAll(async () => {
        // Use a loop to ensure all delete operations are awaited
        const collections = [User, Product, Variant, Order, Cart];
        for (const collection of collections) {
            await collection.deleteMany({});
        }
    });

    let createdOrderId;

    it('should allow a customer to add an item to their cart', async () => {
        const res = await request(app)
            .post('/api/cart')
            .set('Authorization', `Bearer ${customerToken}`)
            .send({
                variantId: testVariantId,
                quantity: 2
            });
        
        expect(res.statusCode).toEqual(200);
        expect(res.body.cart.items).toHaveLength(1);
        expect(res.body.cart.items[0].variant._id).toBe(testVariantId);
        expect(res.body.totalPrice).toBe(100); // 50 * 2
    });

    it('should allow a customer to create an order', async () => {
        // In a real e-commerce flow, this might be a POST /api/orders/from-cart route
        // that reads from the user's cart. For this test, we'll create it directly.
        const res = await request(app)
            .post('/api/orders')
            .set('Authorization', `Bearer ${customerToken}`)
            .send({
                customer_name: "Order Test Customer", // This could be taken from the token
                items: [{ variantId: testVariantId, quantity: 2 }]
            });
        // ADD THIS LINE TO SEE THE ACTUAL ERROR MESSAGE
    console.log('Error Response Body:', res.body);
        expect(res.statusCode).toEqual(201);
        expect(res.body).toHaveProperty('_id');
        expect(res.body.total_price).toBe(100);
        createdOrderId = res.body._id;

        // Verify that the stock was decremented in the database
        const variantInDb = await Variant.findById(testVariantId);
        expect(variantInDb.stock).toBe(8); // Initial stock was 10, ordered 2
    });

    it('should allow an admin to update the order status to shipped', async () => {
        const res = await request(app)
            .put(`/api/orders/${createdOrderId}/status`)
            .set('Authorization', `Bearer ${adminToken}`)
            .send({
                status: "shipped"
            });

        expect(res.statusCode).toEqual(200);
        expect(res.body.status).toBe("shipped");
    });

    it('should restore stock when an admin cancels the order', async () => {
        // First, verify the current stock is 8
        let variantInDb = await Variant.findById(testVariantId);
        expect(variantInDb.stock).toBe(8);

        const res = await request(app)
            .put(`/api/orders/${createdOrderId}/status`)
            .set('Authorization', `Bearer ${adminToken}`)
            .send({
                status: "cancelled"
            });
        
        expect(res.statusCode).toEqual(200);
        expect(res.body.status).toBe("cancelled");

        // Verify that the stock has been restored to 10 in the database
        variantInDb = await Variant.findById(testVariantId);
        expect(variantInDb.stock).toBe(10); // 8 + 2 = 10
    });
});